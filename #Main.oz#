%Main.Oz
functor
import
    GUI
    Input
    PlayerManager
   OS
   System(showInfo:Print)
define
    GUI_Port
    RecordPlayers 

   GeneratePlayers
   CanMove
   CreateGameState
   SimulateThinking
   UpdateTtw
   Move
   CreateNewList
   ChargeItem
   FireItem
   MineExplode
   RemoveList
   UpdateListOfPlayers
   LaunchTurnByTurn
   LaunchSimultaneous
   InitialPosition
   BroadCastMessage

   GameState
in
   
    %Function to generate players at the beginning of the game
    %Returns a list of records with label player and three fields (port, turnToWait and alive)
   fun {GeneratePlayers}
      fun {GP Players Colors Number}
	 if Number > Input.nbPlayer then nil %There is no more player in Players
	 else 
	    case Players#Colors of (H|T)#(X|Xr) then 
         player(port:{PlayerManager.playerGenerator H X Number} turnToWait:0)|{GP T Xr Number+1}
	    end
	 end
      end
   in
      {GP Input.players Input.colors 1} %Number is initialized to 1
   end

    %Check if the player can move
    %Returns true if he can, false otherwise
    fun{CanMove Player}
       if Player.turnToWait==0 then true
       else false
       end
    end

    
    %creation de l'etat de la partie 
    fun{CreateGameState RecordPlayers}
       GameState in
       GameState= gamestate(playerslist:RecordPlayers
			    alive:Input.nbPlayer
			    firstRound:true
			   )
       GameState
    end
    

    proc {SimulateThinking}
        {Delay ({OS.rand} mod (Input.thinkMax-Input.thinkMin+1))+Input.thinkMin}
    end

    
    %Function that updates the turnToWait of the player, and then updates the playerslist of GameState.
    %Thanks to this function, the player is updated for the next round with turnToWait smaller 
    %Returns NewGameState
    fun{UpdateTtw Player GameState}
       NewPlayer
       NewList
       NewGameState in
       NewPlayer={AdjoinList Player [turnToWait#Player.turnToWait-1]}
       {Print 'Le joueur doit encore attendre a la surface pendant :'}
       {Print NewPlayer.turnToWait}
       NewList={CreateNewList NewPlayer GameState.playerslist}
       NewGameState={AdjoinList GameState [playerslist#NewList]}
       NewGameState
    end

    %Sends to the port of the player the message move
    %ID Position and Direction are binds
    %Check if Direction is Surface or not and sends to GUI some informations
    %Return the new state of the game
    fun{Move Player GameState GUI}
       ID Position Direction NewGameState in
       {Send Player.port move(?ID ?Position ?Direction)}
       {Wait ID} {Wait Position} {Wait Direction}
       {BroadCastMessage GUI  GameState GameState.playerslist Player sayMove(ID Direction)}
       if Direction=='Surface' then
	  NewPlayer NewList in
	  {Send GUI surface(ID)} %the submarine has made surface
	  NewPlayer={AdjoinList Player [turnToWait#Input.turnSurface]}
	  NewList={CreateNewList NewPlayer GameState.playerslist}
	  NewGameState={AdjoinList GameState [playerslist#NewList]}
	  NewGameState
       else
	  {Send GUI movePlayer(ID Position)} %the submarine moves
	  NewGameState=GameState
	  NewGameState
       end
    end

%Create a new list to update GameState.playerslist
%Returns the updated list
    fun{CreateNewList Player PlayersList}
       case PlayersList of nil then nil
       [] H|T then
	  if Player.port==H.port then Player|{CreateNewList Player T}
	  else
	     H|{CreateNewList Player T}
	  end
       end
    end

    %Send to the port of the player the message chargeItem
    %ID and Item are binds as follow :
    %Id::=<id>
    %Item::=null|mine|missile|sonar|drone
    %Return the state of the game
    fun{ChargeItem Player GameState GUI}
       ID KindItem in
       {Send Player.port chargeItem(?ID ?KindItem)}
       {Wait ID}
       {Wait KindItem}
       %{BroadCastMessage GUI GameState GameState.playerslist Player sayCharge(ID KindItem)}
       GameState
    end
    
    %Sends to the port of the player fireItem
    %ID and Mine are binds as follow :
    %ID::=<id> the id of the player who fired the item
    %KindFire ::= <fireitem>
    %If KindFire is a missile, calls the function FireMissileOrMine
    %Returns the new state of the game
    fun{FireItem Player GameState GUI}
       ID KindFire in
       {Send Player.port fireItem(?ID ?KindFire)}
       {Wait ID}
       {Wait KindFire}
       if {Label KindFire}==missile then
	  {BroadCastMessage GUI GameState GameState.playerslist Player sayMissileExplode(ID KindFire.1)}
       elseif {Label KindFire}==mine then
	  {Send GUI putMine(ID KindFire.1)} %Sends to GUI to draw a mine at the position KindFire.1 because of mine(<Position>)
	  {Print 'Il a pose une mine'}
       elseif {Label KindFire}==sonar then
	  {BroadCastMessage GUI GameState GameState.playerslist Player sayPassingSonar()}
       elseif {Label KindFire}==drone then
	  {BroadCastMessage GUI GameState GameState.playerslist Player sayPassingDrone(KindFire)}
       end
       GameState
    end

    %Sends to the port of the player fireMine
    %ID and Mine are binds as follow :
    %ID::=<id> the id of the player who exploded the mine
    %Mine ::= mine(<Position>)
    %If the player has a mine, the mine explodes, and calls the function FireMissileOrMine
    %Returns the new state of the game
    fun{MineExplode Player GameState GUI}
       ID Mine in 
       {Send Player.port fireMine(?ID ?Mine)}
       {Wait ID}
       {Wait Mine}
       if Mine==null then
	  GameState
       else
	  {BroadCastMessage GUI GameState GameState.playerslist Player sayMineExplode(ID Mine)}
	  {Send GUI removeMine(ID Mine)} %GUI removes the mine at the position Mine.1
	  GameState
       end
    end

    %Removes Player of PlayerList because he is dead
    %Returns the updated list of players 
    fun{RemoveList Player PlayersList}
       case PlayersList of nil then nil
       [] H|T then
	  if Player.port==H.port then {RemoveList Player T}
	  else
	     H|{RemoveList Player T}
	  end
       end
    end

    %Updates the list of player if one player is dead
    %NewList::=[<player1> <player2> ... <playerN>]
    %PlayerN::=player(port:integer turnToWait:0|1|...|Input.nbSurface
    %Returns the new state of the game
    fun{UpdateListOfPlayers Player GameState}
       NewList
       NewGameState in
       NewList={RemoveList Player GameState.playerslist}
       NewGameState={AdjoinList GameState [playerslist#NewList alive#GameState.alive-1]}
       NewGameState
    end

    proc{LaunchTurnByTurn Players GameState GUI}
       if GameState.alive==1 then skip %it is the end of the game
	  {Print 'Partie finie'}
       else
	  case Players of nil then {LaunchTurnByTurn GameState.playerslist GameState GUI}
	  [] H|T then
	     Answer GS1 GS2 GS3 GS4 GS5 in
	     {Delay 1000}
	     {Print '#########################################################'}
	     {Send H.port isDead(?Answer)}
	     {Wait Answer}
	     if Answer==true then %Step one of the loop. Check if the player is dead.
		GS1={UpdateListOfPlayers H GameState} % GameState is updated with the player H removed of playerslist because player H is dead
		{LaunchTurnByTurn T GS1 GUI} %it is the turn of the next player 
	     else
		if {CanMove H}==false then%Step one of the loop. Check if the player can move, if he cannot, GS1 is the udated version of GameState for the next loop with turnToWait-1
		   GS1={UpdateTtw H GameState}
		   {LaunchTurnByTurn T GS1 GUI}

		else
		   {Send H.port dive} %If he can move, the player dives
		   GS2={Move H GameState GUI} %Step two of the loop. The player moves and GS2 is a new version updated of GameState
		   GS3={ChargeItem H GS2 GUI} %Step three
		   GS4={FireItem H GS3 GUI} %Step four
		   GS5={MineExplode H GS4 GUI} %Step five
		   {LaunchTurnByTurn T GS5 GUI}
		end
	     end
	  end
       end
    end
    

  proc {LaunchSimultaneous Players GameState GUI}
      proc {Turn Player}
         Answer GS1 GS2 GS3 GS4 in 
         {Send Player.port dive}
         {Send Player.port isDead(?Answer)}
         {Wait Answer}
         if(Answer == true) then
            GS1={UpdateListOfPlayers Player GameState}
         else 
            if(GameState.alive==1) then {Print 'Partie finie'}
            else
               {SimulateThinking}
               GS1={Move Player GameState GUI}
               {Send Player.port isDead(?Answer)}
               {Wait Answer}
               if(Answer == true) then
                  GS2={UpdateListOfPlayers Player GS1}
               else
                  if(GameState.alive==1) then {Print 'Partie finie'}
                  else 
                     {SimulateThinking}
                     GS2={ChargeItem Player GS1 GUI}
                     {Send Player.port isDead(?Answer)}
                     {Wait Answer}
                     if(Answer == true) then
                        GS3={UpdateListOfPlayers Player GS2}
                     else
                        if(GameState.alive==1) then {Print 'Partie finie'}
                        else
                           {SimulateThinking}
                           GS3 = {FireItem Player GS2 GUI}
                           {Send Player.port isDead(?Answer)}
                           {Wait Answer}
                           if(Answer == true) then
                              GS4={UpdateListOfPlayers Player GS3}
                           else
                              if(GameState.alive==1) then {Print 'Partie finie'}
                              else 
                                 {SimulateThinking}
                                 GS4={MineExplode Player GS3 GUI}
                                 {Turn Player}
                              end 
                           end
                        end
                     end
                  end
               end
            end
         end
      end
   in
      {List.forAll Players (proc {$ Player} thread {Turn Player} end end)} 
   end

    %Send Say to all players
    %Return the state of the game
    proc{BroadCastMessage GUI_port GameState PlayersList Player Say}
       Message ID Answer in
       case Say
       of sayMineExplode(ID Position) then
	  case PlayersList of nil then skip
	  [] H|T then
	     {Send H.port sayMineExplode(ID Position ?Message)} 
	     {Wait Message}
	     if (Message \= null) then								
		case Message of sayDamageTaken(ID Damage Life) then
		   {Print 'Un joueur a perdu de la vie a cause dune mine'}
		   {Print 'Le joueur a eu x damage et lui reste y life :'}
		   {Print Damage}
		   {Print Life}
		    {BroadCastMessage GUI_port GameState GameState.playerslist sayDamageTaken(ID Damage Life)} % Broadcast
		   {Send GUI_port lifeUpdate(ID Life)}
		   {BroadCastMessage GUI_port GameState T Player Say}
		[] sayDeath(ID) then
		   {Print 'Un joueur est mort a cause dune mine'}
		    {BroadCastMessage GUI_port GameState GameState.playersList Player sayDeath(ID)} % Broadcast
		   {Send GUI_port removePlayer(ID)}
		    {BroadCastMessage GUI_port GameState T Player Say}
		end
	     end
	  end
       [] sayMissileExplode(ID Position) then
	  case PlayersList of nil then skip
	  [] H|T then 
	     {Send H.port sayMissileExplode(ID Position ?Message)} 
	     {Wait Message}
	     if (Message \= null) then								
		case Message 
		of sayDamageTaken(ID Damage Life) then
		   {Print 'Un joueur a perdu de la vie a cause dun missile'}
		   {Print 'Le joueur a eu x damage et lui reste y life :'}
		   {Print Damage}
		   {Print Life}
		   {Send GUI_port lifeUpdate(ID Life)}
		   {BroadCastMessage GUI_port GameState GameState.playerslist Player sayDamageTaken(ID Damage Life)} % Broadcast
		   {BroadCastMessage GUI_port GameState T Player Say}
		[] sayDeath(ID) then
		   {Print 'Un joueur est mort a cause dun missile'}
		   {BroadCastMessage GUI_port GameState Gamestate.playerslist Player sayDeath(ID)} % Broadcast
		   {Send GUI_port removePlayer(ID)}
		   {BroadCastMessage GUI_port GameState T Player Say}
		end
	     end
	  end
       [] sayPassingSonar() then
	  case PlayersList of nil then skip
	  [] H|T then
	     {Send H.port sayPassingSonar(?ID ?Answer)}
	     {Wait ID}
	     {Wait Answer}
	     {Send Player.port sayAnswerSonar(ID Answer)}
	     {BroadCastMessage GUI_port GameState T Player Say}
	  end
       [] sayPassingDrone(Drone) then
	   case PlayersList of nil then skip
	  [] H|T then
	     {Send H.port sayPassingDrone(Drone ?ID ?Answer)}
	     {Wait ID}
	     {Wait Answer}
	     {Send Player.port sayAnswerDrone(Drone ID Answer)}
	      {BroadCastMessage GUI_port GameState T Player Say}
	   end
       else
	  case PlayersList of nil then skip
	  [] H|T then
	     {Send H.port Say}
	     {BroadCastMessage GUI_port GameState T Player Say}
	  end
       end							
    end
    
     
    proc{InitialPosition RecordPlayers GUI}
       ID
       Position
    in
       case RecordPlayers of nil then skip
       [] H|T then
	  {Send H.port dive}
	  {Send H.port initPosition(?ID ?Position)}
	  {Wait ID}
	  {Wait Position}
	  {Send GUI initPlayer(ID Position)}
	  {InitialPosition T GUI}
       end
    end

    %Lancement du GUI
    GUI_Port = {GUI.portWindow}
    {Send GUI_Port buildWindow}
   {Print 'Lancement GUI'}

    %Creates players
    %RecordPlayers has a port, a turnToWait and a alive field
    RecordPlayers = {GeneratePlayers}
   {Print 'Creation des joueurs '}

    %Ask players to choose an initial position and send to GUI
    {InitialPosition RecordPlayers GUI_Port}
    {Print 'Position initiale'}
    
    %Creation de l'etat de la partie
    GameState={CreateGameState RecordPlayers}
    {Print 'Creation du GameState'}

   {Delay 3000}
    %Lancement de la partie 
    if(Input.isTurnByTurn) then
       {LaunchTurnByTurn RecordPlayers GameState GUI_Port}
    else 
      {LaunchSimultaneous RecordPlayers GameState GUI_Port}
    end
end