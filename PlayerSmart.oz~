%PlayerSmart
functor
import
   Input
   OS
   System(showInfo:Print)
export
   portPlayer:StartPlayer
define
   StartPlayer
   TreatStream

   InitPosition
   Move
   Dive
   ChargeItem
   FireItem 
   FireMine
   IsDead
   SayMove
   SaySurface
   SayCharge
   SayMinePlaced
   SayMissileExplode
   SayMineExplode
   SayPassingDrone
   SayAnswerDrone
   SayPassingSonar
   SayAnswerSonar
   SayDeath
   SayDamageTaken

   CreateStatePlayer
   IsVisited
   IsPositionOk
   NewMineLocation
   MineOk
   IsLimitOfMap
   RandomPosition   
   HelpII
   MoveRandomly
   MoveIfTarget


in
   
   proc{TreatStream Stream PlayerState} 
      case Stream of nil then skip
      [] initPosition(ID Position)|T then
	 NewPlayerState in
	 NewPlayerState={InitPosition ID Position PlayerState}
	 {TreatStream T NewPlayerState}

      [] move(ID Position Direction)|T then
	 NewPlayerState in
	 NewPlayerState={Move ID Position Direction PlayerState} 
	 {TreatStream T NewPlayerState}    
	 
      [] dive|T then
	 NewPlayerState in
	 NewPlayerState={Dive PlayerState} 
	 {TreatStream T NewPlayerState}
	 
      [] chargeItem(ID KindItem)|T then
	 NewPlayerState in
	 NewPlayerState={ChargeItem ID KindItem PlayerState} 
	 {TreatStream T NewPlayerState}

      [] fireItem(ID KindFire)|T then
	 NewPlayerState in
	 NewPlayerState={FireItem ID KindFire PlayerState} 
	 {TreatStream T NewPlayerState}
	 
      [] fireMine(ID Mine)|T then
	 NewPlayerState in
	 NewPlayerState={FireMine ID Mine PlayerState} 
	 {TreatStream T NewPlayerState}
	 
      [] isDead(Answer)|T then
	 NewPlayerState in
	 NewPlayerState={IsDead Answer PlayerState} 
	 {TreatStream T NewPlayerState}
	 
      [] sayMove(ID Direction)|T then
	 NewPlayerState in
	 NewPlayerState={SayMove ID Direction PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] saySurface(ID)|T then
	 {TreatStream T PlayerState}
	 
      [] sayCharge(ID KindItem)|T then
	 {TreatStream T PlayerState}
	 
      [] sayMinePlaced(ID)|T then
	 {TreatStream T PlayerState}
	 
      [] sayMissileExplode(ID Position Message)|T then
	 NewPlayerState in
	 NewPlayerState={SayMissileExplode ID Position PlayerState Message} 
	 {TreatStream T NewPlayerState}
	 
      [] sayMineExplode(ID Position Message)|T then
	 NewPlayerState in
	 NewPlayerState={SayMineExplode ID Position PlayerState Message} 
	 {TreatStream T NewPlayerState}
	 
      [] sayPassingDrone(Drone ID Answer)|T then
	 NewPlayerState in
	 NewPlayerState={SayPassingDrone Drone ID Answer PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] sayAnswerDrone(Drone ID Answer)|T then
	 NewPlayerState in
	 NewPlayerState={SayAnswerDrone Drone ID Answer PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] sayPassingSonar(ID Answer)|T then
	 NewPlayerState in
	 NewPlayerState={SayPassingSonar ID Answer PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] sayAnswerSonar(ID Answer)|T then
	 NewPlayerState in
	 NewPlayerState={SayAnswerSonar ID Answer PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] sayDeath(ID)|T then
	 NewPlayerState in
	 NewPlayerState={SayDeath ID PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] sayDamageTaken(ID Damage LifeLeft)|T then
	 NewPlayerState in
	 NewPlayerState={SayDamageTaken ID Damage LifeLeft PlayerState}
	 {TreatStream T NewPlayerState}
	 
      [] _|T then {TreatStream T PlayerState}
      end
   end


   %Creates the state of the player
   %PlayerState::=playerstate(id: position:<Position> life: visited:<ListVisited> ...)
   %<ListVisited>::=null|[Position1 ... PositionN] and <PositionN>::=<Position>
   %Returns the state of the player
   fun {CreateStatePlayer ID Color}
      PlayerState

      Position
      Id
      Target
   in
      Position=pt(x:0 y:0)
      Id=id(id:ID color:Color name:_)
      Target=target(id:0 position:Position isTarget:false)

      PlayerState = playerstate(
		       id:Id 
		       position:Position
		       life:Input.maxDamage
		       surface:true
		       visited:nil %liste des positions entre 2 surfaces
		       alive:true
		       mineCharge:0
		       mineAmmo:0
		       missileCharge:0
		       missileAmmo:0
		       sonarCharge:0
		       sonarAmmo:0
		       droneCharge:0
		       droneAmmo:0
		       minePlanted:0
		       mineLocation:nil
		       target:Target %the target of the player
		       )
      PlayerState
   end

    %Function to create the player
    %Returns the port of the player
   fun{StartPlayer Color ID}
      Stream
      Port
      PlayerState
   in
      PlayerState={CreateStatePlayer ID Color}
      {NewPort Stream Port}
      thread {TreatStream Stream PlayerState} end
      Port
   end


    %Initialize the position of the player
    %Returns the new state of the player 
   fun{InitPosition ID Position PlayerState}
      NewPlayerState
   in
      ID=PlayerState.id
      Position={RandomPosition}
      NewPlayerState={AdjoinList PlayerState [position#Position visited#[Position]]}
      NewPlayerState
   end

   %ID, Position and Direction are binds as follow :
   %ID::=<id>, Position::=<Position> and Direction::=<carddirection>|surface
   %Returns the new state of the player
   fun{Move ID Position Direction PlayerState}
      NewPlayerState in
      if PlayerState.target.id==0 then
	 NewPlayerState={MoveRandomly ID Position Direction PlayerState} %if the player does not have a target, he moves randomly
      else
	 NewPlayerState={MoveIfTarget ID Position Direction PlayerState 1}
      end
      NewPlayerState
   end

    %The player is in the water and not at the surface anymore
    %Returns the new state of the player
   fun{Dive PlayerState}
      NewPlayerState in
      NewPlayerState={AdjoinList PlayerState [surface#false]}
      NewPlayerState
   end

   %ID and KindItem are binds as follow :
   %ID::=<id> and KindItem::=null|missile|mine|sonar|drone
   %Returns the new state of the player
   fun{ChargeItem ID KindItem PlayerState}
      NewPlayerState in
      ID = PlayerState.id
      if PlayerState.target.id==0 then %if the player does not have a target
	 if (PlayerState.sonarAmmo==0) then %if the player does not have a sonar 
	    if (PlayerState.sonarCharge+1 == Input.sonar) then
	       KindItem ='sonar'
	       {Print 'Le joueur smart a construit un sonar'}
	       NewPlayerState={AdjoinList PlayerState [sonarCharge#0 sonarAmmo#PlayerState.sonarAmmo+1]}
	       NewPlayerState
	    else
	       KindItem = nil
	       {Print 'Le joueur smart a une charge de sonar en plus'}
	       NewPlayerState={AdjoinList PlayerState [sonarCharge#PlayerState.sonarCharge+1]}
	       NewPlayerState
	    end
	 end
      elseif (PlayerState.target.isTarget==false) then %if the player has launched his sonar but not his drone
	 if (PlayerState.droneCharge+1 == Input.drone) then
	    KindItem = 'drone'
	     {Print 'Le joueur smart a construit un drone'}
	    NewPlayerState={AdjoinList PlayerState [droneCharge#0 droneAmmo#PlayerState.droneAmmo+1]}
	    NewPlayerState
	 else
	    KindItem = nil
	    {Print 'Le joueur smart a une charge de drone en plus'}
	    NewPlayerState={AdjoinList PlayerState [droneCharge#PlayerState.droneCharge+1]}
	    NewPlayerState
	 end
      else
	 if (PlayerState.missileAmmo<2)then
	    if (PlayerState.missileCharge+1 == Input.missile) then
	       KindItem = 'missile'
	        {Print 'Le joueur smart a construit un missile'}
	       NewPlayerState={AdjoinList PlayerState [missileCharge#0 missileAmmo#PlayerState.missileAmmo+1]}
	       NewPlayerState
	    else 
	       KindItem = nil
	       {Print 'Le joueur a une charge de missile en plus'}
	       NewPlayerState={AdjoinList PlayerState [missileCharge#PlayerState.missileCharge+1]}
	       NewPlayerState
	    end
	 else
	    if(PlayerState.mineCharge+1==Input.mine)then
	       KindItem='mine'
	        {Print 'Le joueur smart a construit une mine'}
	       NewPlayerState={AdjoinList PlayerState [mineCharge#0 mineAmmo#PlayerState.mineAmmo+1]}
	       NewPlayerState
	    else 
	       KindItem = nil
	       {Print 'Le joueur a une charge de mine en plus'}
	       NewPlayerState={AdjoinList PlayerState [mineCharge#PlayerState.mineCharge+1]}
	       NewPlayerState
	    end
	 end
      end
   end

   %ID and KindFire are binds as follow :
   %ID::=<id> and KindFire::=<fireitem>|null
   %KindFire=nil if the player does not hae enough charge to fire an item
   %Returns the new state of the player
   fun{FireItem ID KindFire PlayerState}
      NewPlayerState in
      ID=PlayerState.id
      if PlayerState.target.id==0 then %if the player does not have a target
	 if(PlayerState.sonarAmmo > 0) then
	    {Print 'Le joueur smart a lance un sonar'}
	    KindFire=sonar
	    NewPlayerState={AdjoinList PlayerState [sonarAmmo#PlayerState.sonarAmmo-1]}
	    NewPlayerState
	 else
	    KindFire=nil 
	    NewPlayerState=PlayerState
	    NewPlayerState
	 end
      else %if the player has a target
	 if (PlayerState.target.isTarget==false) then %if the player has a target but does not have launched his drone
	    if PlayerState.droneAmmo>0 then
	       {Print 'Le joueur smart a lancer un drone'}
	       KindFire=drone(row PlayerState.target.position.x)
	       NewPlayerState={AdjoinList PlayerState [droneAmmo#PlayerState.droneAmmo-1]}
	       NewPlayerState
	    else
	       KindFire=nil
	       NewPlayerState=PlayerState
	       NewPlayerState
	    end
	 else %if the player has a good target
	    Manhattan in
	    Manhattan={Abs (PlayerState.position.x - PlayerState.target.position.x)}+ {Abs (PlayerState.position.y - PlayerState.target.position.y)}
	    if Manhattan>=2 andthen Manhattan =< Input.maxDistanceMissile then 
	       if PlayerState.missileAmmo>0 then
		  KindFire = missile(PlayerState.target.position)%the missile is fired at the possible position of the target
		  {Print 'Le joueur smart a deploye un missile'}
		  NewPlayerState={AdjoinList PlayerState [missileAmmo#PlayerState.missileAmmo-1]}
		     NewPlayerState
	       else
		  KindFire=nil
		  NewPlayerState=PlayerState
		  NewPlayerState
	       end
	    elseif  Manhattan =< Input.maxDistanceMine andthen  Manhattan >= Input.minDistanceMine then
	       if(PlayerState.mineAmmo>0) andthen {IsPositionOk PlayerState.target.position.x PlayerState.target.position.y}==1 then
		  KindFire=mine(PlayerState.target.position)
		  {Print 'Le joueur smart a pose une mine'}
		  NewPlayerState={AdjoinList PlayerState [mineAmmo#PlayerState.mineAmmo-1 minePlanted#PlayerState.minePlanted+1 mineLocation#(KindFire.1|PlayerState.mineLocation)]}
		  NewPlayerState
	       else
		  KindFire=nil
		  NewPlayerState=PlayerState
		  NewPlayerState
	       end
	    else
	       KindFire=nil
	       NewPlayerState=PlayerState
	       NewPlayerState
	    end
	 end
      end
   end


   %ID and Mine are bind as follow :
   %Id::=<id> and Mine::=mine(<Position>)|null
   %If the player has a mine and the distance Manhattan between him and the mine is >=2 then he fires a mine
   %Returns the new state of the player
   fun{FireMine ID Mine PlayerState}
      NewPlayerState in
      ID=PlayerState.id
      NewPlayerState={MineOk Mine PlayerState PlayerState.mineLocation}
      NewPlayerState
   end
         

   %Check if the player is dead or not
   %Binds Anwser as follow : Answer::=true(1)|false(0)
   %Returns the state of the player
   fun{IsDead Answer PlayerState}
      NewPlayerState in
      if PlayerState.life==0 then
	 Answer=true
      else
	 Answer=false
      end
      NewPlayerState=PlayerState
      NewPlayerState
   end

   %Receives information regarding player movement. If it is the target of the player who moved, the player adapts PlayerState.target.position
   %Returns the new state of the player
   fun{SayMove ID Direction PlayerState}
      NewPlayerState NewTarget NewPosition in
      if PlayerState.target.id==0 then PlayerState
      else
	 if ID==PlayerState.target.id then
	    if Direction=='North' then
	       if {IsPositionOk PlayerState.target.position.x-1 PlayerState.target.position.y}==1 then
		  NewPosition=pt(x:PlayerState.target.position.x-1 y:PlayerState.target.position.y)
		  NewTarget={AdjoinList PlayerState.target [position#NewPosition]}
		  NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
		  NewPlayerState
	       else
		  PlayerState
	       end
	    elseif Direction=='South' then
	       if {IsPositionOk PlayerState.target.position.x+1 PlayerState.target.position.y}==1 then
		  NewPosition=pt(x:PlayerState.target.position.x+1 y:PlayerState.target.position.y)
		  NewTarget={AdjoinList PlayerState.target [position#NewPosition]}
		  NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
		  NewPlayerState
	       else
		  PlayerState
	       end
	    elseif Direction=='West' then
	       if {IsPositionOk PlayerState.target.position.x PlayerState.target.position.y-1}==1 then
		  NewPosition=pt(x:PlayerState.target.position.x y:PlayerState.target.position.y-1)
		  NewTarget={AdjoinList PlayerState.target [position#NewPosition]}
		  NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
		  NewPlayerState
	       else
		  PlayerState
	       end
	    elseif Direction=='East' then
	       if {IsPositionOk PlayerState.target.position.x PlayerState.target.position.y+1}==1 then
		  NewPosition=pt(x:PlayerState.target.position.x y:PlayerState.target.position.y+1)
		  NewTarget={AdjoinList PlayerState.target [position#NewPosition]}
		  NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
		  NewPlayerState
	       else
		  PlayerState
	       end
	    else
	       PlayerState
	    end
	 else
	    PlayerState
	 end
      end
   end
   

   fun{SaySurface ID PlayerState}
      PlayerState
   end

   fun{SayCharge ID KindItem PlayerState}
      PlayerState
   end

   fun{SayMinePlaced ID PlayerState}
      PlayerState
   end

   %Checks the distance thanks to Manhattan distance
   %Binds <Message> ::=message(id:<id> damage:0|1|2 lifeleft:<life>)
   %Returns the new state of the player
   fun{SayMissileExplode ID Position PlayerState Message}
      NewPlayerState Manhattan Damage
   in
      Manhattan = {Abs (Position.x-PlayerState.position.x)} + {Abs (Position.y - PlayerState.position.y)}
      {Print 'La distance Manhattan de PlayerSmart est de :'}
      {Print Manhattan}
      if Manhattan >= 2 then
	 NewPlayerState=PlayerState
	 Damage=0
	 Message=null %there is no damage
      elseif Manhattan==1 then
	 if PlayerState.life=<1 then
	    NewPlayerState={AdjoinList PlayerState [life#0 alive#false]}
	    Message=sayDeath(NewPlayerState.id) %there is no life anymore
	 else
	    NewPlayerState={AdjoinList PlayerState [life#PlayerState.life-1]}
	    Damage=1
	    Message=sayDamageTaken(NewPlayerState.id Damage NewPlayerState.life)  %there is one damage
	 end
      else
	 if PlayerState.life=<2 then
	    NewPlayerState={AdjoinList PlayerState [life#0 alive#false]}
	    Message=sayDeath(NewPlayerState.id) %there is no life anymore
	 else
	    NewPlayerState={AdjoinList PlayerState [life#PlayerState.life-2]}
	    Damage=2
	    Message=sayDamageTaken(NewPlayerState.id Damage NewPlayerState.life)  %there is one damage
	 end
      end
      NewPlayerState
   end

    %Checks the distance thanks to Manhattan distance
   %Binds <Message> ::=message(id:<id> damage:0|1|2 lifeleft:<life>)
   %Returns the new state of the player
  fun{SayMineExplode ID Position PlayerState Message}
     {SayMissileExplode ID Position PlayerState Message}
   end

  %Binds ID and Answer. Answer is true if the question in Drone is true. False otherwise
  %Returns the state of the player 
   fun{SayPassingDrone Drone ID Answer PlayerState}
      ID=PlayerState.id
      if Drone.1==row then
	 if PlayerState.position.x==Drone.2 then
	    Answer=true
	 else
	    Answer=false
	 end
      else
	 if PlayerState.position.y==Drone.2 then
	    Answer=true
	 else
	    Answer=false
	 end
      end
      PlayerState
   end

   %If Answer is true, then the position is updated. Otherwise, the position is the same then the previsous
   %Returns the new state of the player with the target updated
   fun{SayAnswerDrone Drone ID Answer PlayerState}
      NewTarget NewPlayerState in
      if PlayerState.target.id==0 then PlayerState
      else
	 if PlayerState.target.id==ID then
	    if Answer==true then
	       if Drone.1==row then
		  NewTarget={AdjoinList PlayerState.target [position#pt(x:Drone.2 y:PlayerState.target.position.y) isTarget#true]}
		  NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
	       else
		  NewTarget={AdjoinList PlayerState.target [position#pt(x:PlayerState.target.position.x y:Drone.2) isTarget#true]}
		  NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
	       end
	    else
	       NewTarget={AdjoinList PlayerState.target [isTarget#true]}
	       NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
	    end
	 else
	    NewPlayerState=PlayerState
	 end
	 NewPlayerState
      end
   end			     

   %The player decides to bind randomly a false row or column, the other is true
   %He checks if the position is ok, and if it is, binds Answer and ID is bind too
   %Returns the state of the player
   fun{SayPassingSonar ID Answer PlayerState}
      Choice Random in
      ID=PlayerState.id
      Choice={OS.rand} mod 2
      if Choice==0 then
	 Random={OS.rand}mod(1+Input.nColumn)
	 if {IsPositionOk PlayerState.position.x Random}==1 then %if the position is possible
	    Answer=pt(x:PlayerState.position.x y:Random)
	    PlayerState
	 else
	    {SayPassingSonar ID Answer PlayerState}
	 end
      else
	 Random={OS.rand}mod(1+Input.nRow)
	 if {IsPositionOk Random PlayerState.position.y}==1 then
	    Answer=pt(x:Random y:PlayerState.position.y)
	    PlayerState
	 else
	    {SayPassingSonar ID Answer PlayerState}
	 end
      end
   end

   %If the player has already a target, he does nothing. Otherwise, he has a new target
   %Returns the new state of the player
   fun{SayAnswerSonar ID Answer PlayerState}
      NewPlayerState NewTarget in
      if PlayerState.target.id==0 then
	 if ID.id==PlayerState.id.id then %if it is the position of the player who launched the sonar
	    PlayerState
	 else
	    NewTarget={AdjoinList PlayerState.target [id#ID position#Answer]}
	    NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
	    NewPlayerState
	 end
      else
	 PlayerState
      end
   end

   %If the ID of the player dead is the ID of the target of the player, the player delete his target
   %Returns the new state of the player
   fun{SayDeath ID PlayerState}
      NewPlayerState NewTarget in
      if ID==PlayerState.target.id then
	 NewTarget={AdjoinList PlayerState.target [id#0 position#pt(x:0 y:0) isTarget#false]}
	 NewPlayerState={AdjoinList PlayerState [target#NewTarget]} %the player does not have a target anymore
	 {Print 'Le joueur smart a perdu sa cible car elle est morte'}
	 NewPlayerState
      else
	 PlayerState
      end
   end

   %If the player has a target, he checks if the target has damages, he he does not have damage, the player has lost his target
   %Returns the state of the player
   fun{SayDamageTaken ID Damage LifeLeft PlayerState}
      NewPlayerState NewTarget in
      if ID==PlayerState.target.id then
	 if Damage>0 then
	    PlayerState
	 else
	    NewTarget={AdjoinList PlayerState.target [id#0 position#pt(x:0 y:0) isTarget#false]}
	    NewPlayerState={AdjoinList PlayerState [target#NewTarget]}
	    {Print 'Le joueur smart a perdu sa cible'}
	    NewPlayerState
	 end
      else
	 PlayerState
      end
   end

%%%%%%%%%%% Useful functions %%%%%%%%%%%%%%%%%%%

   %Choose a random position
   %<Row>::= 1|2|...|Input.nRow and <Column>::=1|2|...|Input.nColumn
   %Returns a position and Position::=pt(x:<Row> y:<Column>)
   fun {RandomPosition}
      Row Column Position in
      Row = {OS.rand} mod Input.nRow+1
      Column = {OS.rand} mod Input.nColumn+1
      if {IsPositionOk Row Column}==1 then
	 Position=pt(x:Row y:Column)
	 Position
      else
	 {RandomPosition}
      end
   end

   fun{IsLimitOfMap Row Column}
      if  Row >= 1 andthen Row =< Input.nRow andthen Column >= 1 andthen Column =< Input.nColumn then false
      else true 
      end
   end
   
    %Check if the position is ok (if the position is not out of the map and if it is not an island) 
    %Returns 1 if it is water and in the map, 0 otherwise
   fun{IsPositionOk Row Column}
      if {IsLimitOfMap Row Column}==true then 0
      else
	 if {Nth {Nth Input.map Row} Column}==1 then 0
	 else 1
	 end
      end 
   end

   %Verifies that the position has not been visited by the player since the last time he was on the surface.
   %Returns 0 (false) if not, 1 (true) otherwise
   fun{IsVisited X Y List}
      case List of nil then 0
      [] H|T then
	 if H.x==X then
	    if H.y==Y then 1
	    else {IsVisited X Y T}
	    end
	 else {IsVisited X Y T}
	 end
      end
   end

   %Check if the mine can explode without damaging the player
   %Returns the new state of the player
   fun{MineOk Mine PlayerState List}
      Manhattan NewPlayerState in
      case List of nil then
	 Mine=null
	 NewPlayerState=PlayerState
	 NewPlayerState
      [] H|T then
	 Manhattan={Abs H.x-PlayerState.position.x} + {Abs H.y-PlayerState.position.y}
	 if Manhattan < 2 then
	    {MineOk Mine PlayerState T}
	 else
	    Mine=H
	    NewPlayerState={AdjoinList PlayerState [minePlanted#PlayerState.minePlanted-1 mineLocation#{NewMineLocation H PlayerState.mineLocation}]}
	    {Print 'Le joueur smart a explose une mine'}
	    NewPlayerState
	 end
      end
   end

   %Updates PlayerState.mineLocation without the exploding mine
   %Returns the new list of mine's location
   fun{NewMineLocation Mine List}
      case List of nil then nil
      [] H|T then
	 if H==Mine then {NewMineLocation Mine T}
	 else
	    H|{NewMineLocation Mine T}
	 end
      end
   end

    fun{MoveRandomly ID Position Direction PlayerState}
      Poles Dir NewPlayerState in
      ID=PlayerState.id
      Poles= ['East' 'North' 'South' 'West' 'Surface']
      Dir={OS.rand} mod 5+1 
      if Dir==2 then
	 if {IsPositionOk PlayerState.position.x-1 PlayerState.position.y}==0 then
	    {Move ID Position Direction PlayerState} 
	 else
	    if {IsVisited PlayerState.position.x-1 PlayerState.position.y PlayerState.visited}==1 then
	       {Move ID Position Direction PlayerState} 
	    else
	       Direction={Nth Poles Dir}
	       {Print Direction}
	       Position=pt(x:PlayerState.position.x-1 y:PlayerState.position.y)
	       NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
	       NewPlayerState
	    end
	 end
      elseif Dir==3 then
	 if {IsPositionOk PlayerState.position.x+1 PlayerState.position.y}==0 then
	    {Move ID Position Direction PlayerState} 
	 else
	    if {IsVisited PlayerState.position.x+1 PlayerState.position.y PlayerState.visited}==1 then
	       {Move ID Position Direction PlayerState} 
	    else
	       Direction={Nth Poles Dir}
	       {Print Direction}
	       Position=pt(x:PlayerState.position.x+1 y:PlayerState.position.y)
	       NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
	       NewPlayerState
	    end
	 end
      elseif Dir==1 then
	 if {IsPositionOk PlayerState.position.x PlayerState.position.y+1}==0 then
	    {Move ID Position Direction PlayerState} 
	 else
	    if {IsVisited PlayerState.position.x PlayerState.position.y+1 PlayerState.visited}==1 then
	       {Move ID Position Direction PlayerState} 
	    else
	       Direction={Nth Poles Dir}
	       {Print Direction}
	       Position=pt(x:PlayerState.position.x y:PlayerState.position.y+1)
	       NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
	       NewPlayerState
	    end
	 end
      elseif Dir==4 then
	 if {IsPositionOk PlayerState.position.x PlayerState.position.y-1}==0 then
	    {Move ID Position Direction PlayerState} 
	 else
	    if {IsVisited PlayerState.position.x PlayerState.position.y-1 PlayerState.visited}==1 then
	       {Move ID Position Direction PlayerState} 
	    else
	       Direction={Nth Poles Dir}
	       {Print Direction}
	       Position=pt(x:PlayerState.position.x y:PlayerState.position.y-1)
	       NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
	       NewPlayerState
	    end
	 end
      else
	 Direction={Nth Poles Dir}
	 {Print Direction}
	 Position=PlayerState.position
	 NewPlayerState={AdjoinList PlayerState [visited#[Position] surface#true]}
	 NewPlayerState
      end
    end

    fun{MoveIfTarget ID Position Direction PlayerState Acc}
       DistX DistY NewPlayerState in
       ID=PlayerState.id
       DistX = PlayerState.position.x-PlayerState.target.position.x
       DistY = PlayerState.position.y-PlayerState.target.position.y
       if DistX \= 0 andthen Acc==1 then
	  if DistX>0 then
	     if {IsPositionOk PlayerState.position.x-1 PlayerState.position.y}==1 andthen {IsVisited PlayerState.position.x-1 PlayerState.position.y PlayerState.visited}==0 then
		Direction='North'
		Position=pt(x:PlayerState.position.x-1 y:PlayerState.position.y)
		NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
		NewPlayerState
	     else
		{MoveIfTarget ID Position Direction PlayerState Acc+1}
	     end
	  else
	     if {IsPositionOk PlayerState.position.x+1 PlayerState.position.y}==1 andthen {IsVisited PlayerState.position.x+1 PlayerState.position.y PlayerState.visited}==0 then
		Direction='South'
		Position=pt(x:PlayerState.position.x+1 y:PlayerState.position.y)
		NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
		NewPlayerState
	     else
		{MoveIfTarget ID Position Direction PlayerState Acc+1}
	     end
	  end
       elseif DistY \=0 andthen Acc==2 then
	  if DistY>0 then
	     if {IsPositionOk PlayerState.position.x PlayerState.position.y-1}==1 andthen {IsVisited PlayerState.position.x PlayerState.position.y-1 PlayerState.visited}==0 then
		Direction='West'
		Position=pt(x:PlayerState.position.x y:PlayerState.position.y-1)
		NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
		NewPlayerState
	     else
		{MoveIfTarget ID Position Direction PlayerState Acc+1}
	     end
	  else
	     if {IsPositionOk PlayerState.position.x PlayerState.position.y+1}==1 andthen {IsVisited PlayerState.position.x PlayerState.position.y+1 PlayerState.visited}==0 then
		Direction='South'
		Position=pt(x:PlayerState.position.x y:PlayerState.position.y+1)
		NewPlayerState={AdjoinList PlayerState [position#Position visited#(Position|PlayerState.visited)]}
		NewPlayerState
	     else
		{MoveIfTarget ID Position Direction PlayerState Acc+1}
	     end
	  end
       else
	  {MoveRandomly ID Position Direction PlayerState}
       end
    end
    

end